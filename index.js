import TelegramBot from "node-telegram-bot-api";
import env from "dotenv";
env.config();

import { EMAIL_REGEXP, requestArguments } from "./constants.js";
import { savingPayment } from "./db/savingPayment.js";
import { sendEmail } from "./utils/sendEmail.js";
import { getAllProduct } from "./utils/getAllProduct.js";
import { getRandomInteger } from "./utils/getRandomInteger.js";
import { getCheckUrlImage } from "./utils/getCheckUrlImage.js";
import { connectToCluster } from "./db/connectToCluster.js";

const mongoClient = await connectToCluster(process.env.DB_URI);
const db = await mongoClient.db("wb_parse");
const col = await db.collection("paid_clients");

const bot = new TelegramBot(process.env.BOT_TOKEN, {
  polling: true,
  // request: {
  //   proxy: "http://127.0.0.1:1234",
  // },
});

const idsUsed = [];
let mail = "";

const options = {
  reply_markup: JSON.stringify({
    inline_keyboard: [[{ text: "–û–ø–ª–∞—Ç–∏—Ç—å", callback_data: "/pay" }]],
  }),
};

const mainGetProductFunction = async () => {
  let products = [];

  products = await getAllProduct(requestArguments);
  setInterval(async () => {
    const hours = new Date().getHours();
    const minutes = new Date().getMinutes();

    if (hours === 23 && minutes >= 30 && minutes <= 40) {
      products = await getAllProduct(requestArguments);
    }

    let product = {};

    while (true) {
      const randomProduct = products[getRandomInteger(0, products.length - 1)];

      const imageLink = await getCheckUrlImage(randomProduct.imageLink);

      randomProduct.imageLink = imageLink;

      if (randomProduct && !idsUsed.includes(randomProduct.id)) {
        product = randomProduct;
        break;
      }
    }
    const description = `https://www.wildberries.ru/catalog/${product.id}/detail.aspx\n - ${product.name}\n - –ë—Ä–µ–Ω–¥: ${product.brand}\n - –°–∫–∏–¥–∫–∞: ${product.sale}%\n - –†–µ–π—Ç–∏–Ω–≥: ${product.reviewRating}\n - –°—Ç–æ–∏–º–æ—Å—Ç—å: ${product.salePriceU} —Ä—É–±.`;

    idsUsed.push(product.id);

    const dbClients = await col.find().toArray();

    if (!!dbClients.length) {
      dbClients.forEach((cl) => {
        if (product.imageLink) {
          bot.sendPhoto(cl.chat_id, product.imageLink, {
            caption: description,
          });
        } else {
          bot.sendMessage(cl.chat_id, description);
        }
      });
    }
  }, 600000); // 10 min
  // }, 120000); // 2 min
};

bot.on("callback_query", async (msg) => {
  if (msg.data === "/pay") {
    const dbClients = await col.find().toArray();
    const clientsArr = await dbClients.map((cl) => {
      return cl.id;
    });

    if (clientsArr.includes(msg.from.id)) {
      return;
    }

    const resSave = await savingPayment(msg, mail);

    if (resSave) {
      await sendEmail(mail);
      bot.deleteMessage(msg.message.chat.id, msg.message.message_id);
      bot.sendMessage(
        msg.message.chat.id,
        "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞ –ø—Ä–æ—à–ª–∞!\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ—Ç–µ –ø–∏—Å—å–º–æ, –∏—â–∏—Ç–µ –µ–≥–æ –≤ —Å–ø–∞–º–µ.\n\n–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –æ–∂–∏–¥–∞–π—Ç–µ, –∫–∞–∫ –æ–Ω –ø–æ–¥–±–µ—Ä–µ—Ç —Ç–æ–≤–∞—Ä –æ–Ω —Å—Ä–∞–∑—É –∂–µ –ø—Ä–∏—à–ª—ë—Ç –µ–≥–æ –≤–∞–º."
      );
    } else {
      bot.sendMessage(
        msg.message.chat.id,
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
      );
    }
  }
});

bot.on("message", async (msg) => {
  const dbClients = await col.find().toArray();
  const clientsArr = await dbClients.map((cl) => {
    return cl.id;
  });

  if (clientsArr.includes(msg.from.id)) {
    return;
  }

  if (msg.text === "/start") {
    bot.sendMessage(
      msg.chat.id,
      "–ü—Ä–∏–≤–µ—Ç üëãüèª\n–•–æ—á–µ—à—å –∫–ª–∞—Å—Å–Ω–æ –æ–¥–µ–≤–∞—Ç—å—Å—è –∏ –ø—Ä–∏ —ç—Ç–æ–º —Ç—Ä–∞—Ç–∏—Ç—å –ø–æ –º–∏–Ω–∏–º—É–º—É? –¢–æ–≥–¥–∞ —Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É!\n\nüìõ–û—Å—Ç—Ä–æ–∂–Ω–æ - —ç—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å\n\nüõçÔ∏è–¢–µ–ø–µ—Ä—å —è - —ç—Ç–æ –Ω–µ–∑–∞–º–µ–Ω–∏–º–∞—è —á–∞—Å—Ç—å —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏. –¢—É—Ç —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –≤—Å—ë —á—Ç–æ –∏—Å–∫–∞–ª–∞ ,–Ω–æ —É–∂–µ –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ.\n\n–ë—Ä–µ–Ω–¥—ã: Mango, Befree, Zarina, Love Republic, Lime, Nike, Adidas, INCITY, Colin‚Äôs, O‚ÄôSTIN –∏ –¥—Ä.\n\n–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:\nüëö–û–¥–µ–∂–¥–∞ - –¥–æ 1500 —Ä—É–±–ª–µ–π\nüß•–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞ - –¥–æ 2500 —Ä—É–±–ª–µ–π\nüë°–û–±—É–≤—å - –¥–æ 2500 —Ä—É–±–ª–µ–π\nüëú–°—É–º–∫–∏ - –¥–æ 1300 —Ä—É–±–ª–µ–π\n\nüí≤–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: 490 —Ä—É–±–ª–µ–π\n\nüì® –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞–π —Å–≤–æ—é –ø–æ—á—Ç—É."
    );
    return;
  }

  if (EMAIL_REGEXP.test(msg.text)) {
    mail = msg.text;
    bot.sendMessage(msg.chat.id, "–ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã", options);
  } else {
    bot.sendMessage(
      msg.chat.id,
      "Email –∞–¥—Ä–µ—Å –Ω–µ –≤–∞–ª–∏–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
    );
  }
});

console.log("Bot started");

mainGetProductFunction();
